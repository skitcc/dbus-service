
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__configurationProxy_h__proxy__H__
#define __sdbuscpp__configurationProxy_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace com {
namespace system {
namespace configurationManager {
namespace Application {

class Configuration_proxy
{
public:
    static constexpr const char *INTERFACE_NAME
        = "com.system.configurationManager.Application.Configuration";

protected:
    Configuration_proxy(sdbus::IProxy &proxy)
        : m_proxy(proxy)
    {}

    Configuration_proxy(const Configuration_proxy &) = delete;
    Configuration_proxy &operator=(const Configuration_proxy &) = delete;
    Configuration_proxy(Configuration_proxy &&) = delete;
    Configuration_proxy &operator=(Configuration_proxy &&) = delete;

    ~Configuration_proxy() = default;

    void registerProxy()
    {
        m_proxy.uponSignal("ConfigurationChanged")
            .onInterface(INTERFACE_NAME)
            .call([this](const std::map<std::string, sdbus::Variant> &configuration) {
            this->onConfigurationChanged(configuration);
        });
    }

    virtual void onConfigurationChanged(const std::map<std::string, sdbus::Variant> &configuration)
        = 0;

public:
    void ChangeConfiguration(const std::string &key, const sdbus::Variant &value)
    {
        m_proxy.callMethod("ChangeConfiguration")
            .onInterface(INTERFACE_NAME)
            .withArguments(key, value);
    }

    std::map<std::string, sdbus::Variant> GetConfiguration()
    {
        std::map<std::string, sdbus::Variant> result;
        m_proxy.callMethod("GetConfiguration").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

private:
    sdbus::IProxy &m_proxy;
};

}
}
}
} // namespaces

#endif
